package a01730311.tec.milam.games.pixart

enum class PixarteLevels(val numPixels : Int) {
    LVL1(99),
    LVL2(272),
    LVL3(169),
    LVL4(420);

    fun getWidth(): Int {
        return when (this) {
            LVL1 -> 11
            LVL2 -> 17
            LVL3 -> 13
            LVL4 -> 21
        }
    }

    fun getHeight(): Int {
        return numPixels / getWidth()
    }

    //it defines the drawing to make
    fun getPixelBoard(): IntArray {
        return when (this) {
            LVL1 -> intArrayOf(
                -1, 1, 1, 1, 1,-1, 1, 1, 1, 1,-1,
                 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1,
                 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1,
                 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
                 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
                -1, 1, 1, 2, 2, 2, 2, 2, 1, 1,-1,
                -1,-1, 1, 1, 2, 2, 2, 1, 1,-1,-1,
                -1,-1,-1, 1, 1, 2, 1, 1,-1,-1,-1,
                -1,-1,-1,-1, 1, 1, 1,-1,-1,-1,-1,
                )
            LVL2 -> intArrayOf(
                -1,-1,-1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,
                -1,-1, 1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,
                -1,-1,-1, 1,-1,-1, 1, 1, 1, 1, 1,-1,-1, 1,-1,-1,-1,
                -1,-1,-1,-1, 1, 1, 2, 2, 2, 2, 2, 1, 1,-1,-1,-1,-1,
                -1,-1,-1,-1, 1, 2, 2, 2, 2, 2, 2, 2, 1,-1,-1,-1,-1,
                -1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,-1,
                -1,-1,-1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,-1,-1,-1,
                -1,-1,-1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,-1,-1,-1,
                -1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,-1,
                -1,-1,-1,-1, 1, 2, 2, 2, 2, 2, 2, 2, 1,-1,-1,-1,-1,
                -1,-1,-1,-1, 1, 1, 2, 2, 2, 2, 2, 1, 1,-1,-1,-1,-1,
                -1,-1,-1, 1,-1,-1, 1, 1, 1, 1, 1,-1,-1, 1,-1,-1,-1,
                -1,-1, 1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,
                -1,-1,-1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,
                )
            LVL3 -> intArrayOf(
                -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1, 3, 3, 5,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 3, 2, 3, 5,-1,-1,-1,-1,-1,-1,-1,
                -1, 1, 1, 3, 3, 3, 5,-1,-1,-1,-1,-1,-1,
                -1,-1,-1, 3, 3, 3,-1,-1,-1,-1,-1, 3,-1,
                -1,-1,-1, 3, 3, 4,-1,-1,-1,-1, 3, 3,-1,
                -1,-1, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3,-1,
                -1, 5, 3, 3, 3, 3, 3, 3, 4, 3, 3,-1,-1,
                -1, 5, 3, 3, 4, 5, 5, 5, 5, 3, 3,-1,-1,
                -1, 4, 3, 3, 4, 5, 5, 5, 3, 3,-1,-1,-1,
                -1,-1, 5, 3, 3, 3, 5, 3, 3,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 5, 4,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                )
            LVL4 -> intArrayOf(
                -1,-1, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 2,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 1, 1,-1,-1,-1,-1,-1,-1,-1, 2, 1, 2,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 1, 1, 1,-1,-1,-1,-1,-1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
                -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,
                -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,
                -1, 3, 3, 2, 2, 2, 2, 2, 2, 4, 2, 2, 4, 2,-1,-1,-1,-1,-1,-1,-1,
                -1,-1, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2, 1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1, 2, 3, 2, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1,-1, 5, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 2, 5, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 5, 5, 5, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 5, 5, 5, 5, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 5, 5, 5, 5, 2, 2,-1,-1,-1, 2, 3,-1,-1,-1,-1,-1,
                -1,-1,-1,-1,-1, 6, 5, 5, 5, 5, 2,-1,-1,-1,-1,-1, 2, 3,-1,-1,-1,
                -1,-1,-1,-1,-1, 2, 2, 5, 5, 2, 2, 2,-1,-1,-1,-1,-1, 2,-1,-1,-1,
                -1,-1,-1,-1,-1,-1, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1, 2,-1,-1,
                -1,-1,-1,-1,-1,-1,-1,-1, 2, 2, 2, 2,-1,-1, 2, 2, 2, 2,-1,-1,-1,

                )
        }
    }

    //it defines the colors that will appear in colorPickerAdapter
    fun getColors(): Array<String> {
        return when (this) {
            LVL1 -> arrayOf("#000000", "#FF0000")
            LVL2 -> arrayOf("#000000", "#ffda44")
            LVL3 -> arrayOf("#dd272a", "#cab39e", "#f7b70d", "#af7f22", "#f1a30f")
            LVL4 -> arrayOf("#fbc2ca", "#276580", "#163847", "#040606", "#e5bae1", "#9db9c5")
        }
    }
}